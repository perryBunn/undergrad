#BlueJ class context
comment0.params=
comment0.target=KinectWorld()
comment0.text=\n\ Constructs\ a\ KinectWorld\ that\ is\ 640\ by\ 480\ pixels,\n\ with\ a\ full-sized\ thumbnail\ (RGB)\ image\ available,\ but\ no\ depth\ information.\n\n\ If\ you\ need\ to\ configure\ any\ of\ these\ settings,\ use\ one\ of\ the\ other\ constructors.\n
comment1.params=scale\ depth
comment1.target=KinectWorld(double,\ boolean)
comment1.text=\n\ Constructs\ a\ KinectWorld\ that\ is\ scaled\ and\ may\ have\ depth\ available.\n\n\ The\ first\ parameter\ specifies\ a\ scale\ factor\ for\ the\ world.\n\ The\ Kinect\ device\ itself\ captures\ an\ image\ that\ is\ 640\ *\ 480\ pixels,\n\ and\ all\ the\ joints'\ screen\ positions\ are\ given\ in\ terms\ of\ a\ position\n\ in\ this\ image.\ \ If\ you\ want\ to\ display\ a\ larger\ world\ than\ 640\ *\ 480\ pixels\n\ in\ Greenfoot,\ you\ will\ need\ to\ scale\ up\ all\ the\ information\ received\n\ from\ the\ Kinect.\ \ KinectWorld\ can\ do\ this\ for\ you,\ and\ will\ scale\ up\n\ the\ thumbnail\ image,\ the\ user\ images,\ and\ all\ the\ joint\ positions\n\ by\ the\ given\ scale.\ \ So\ if\ you\ pass\ 2.0,\ the\ thumbnail\ image\ will\n\ be\ 1280\ *\ 960\ pixels,\ if\ you\ pass\ 1.5,\ it\ will\ be\ 960\ *\ 720,\ and\ so\ on.\n\ Note\ that\ scaling\ the\ images\ in\ this\ way\ requires\ a\ bit\ of\ extra\ processing\n\ power,\ so\ on\ less\ powerful\ machines\ you\ may\ experience\ some\ slowdown\n\ if\ you\ enable\ this\ scaling.\n\ \n\ The\ second\ parameter\ is\ a\ boolean,\ stating\ whether\ to\ enable\ depth\n\ information.\ \ This\ also\ takes\ up\ a\ bit\ of\ extra\ processing\ time\n\ if\ you\ enable\ it.\n
comment10.params=
comment10.target=greenfoot.GreenfootImage\ getThumbnail()
comment10.text=\n\ Gets\ the\ current\ thumbnail\ (i.e.\ the\ current\ camera\ image).\n\n\ This\ may\ be\ null\ if\ isConnected()\ is\ false.\n
comment11.params=
comment11.target=greenfoot.GreenfootImage\ getThumbnailUnscaled()
comment11.text=\n\ Gets\ the\ actual\ thumbnail,\ without\ any\ scaling\ applied.\n\ This\ can\ be\ useful\ if\ you\ used\ one\ of\ KinectWorld's\ alternate\n\ constructors\ and\ you\ just\ want\ a\ tiny\ thumbnail\ that\ does\ not\n\ need\ to\ be\ scaled\ up.\n\n\ This\ may\ be\ null\ if\ isConnected()\ is\ false.\n
comment12.params=
comment12.target=greenfoot.GreenfootImage\ getCombinedUserImage()
comment12.text=\n\ Gets\ an\ image\ featuring\ a\ cut-out\ of\ all\ the\ users\ in\ the\ scene.\n\n\ Technically,\ it\ gets\ an\ image\ the\ same\ size\ as\ getThumbnail(),\ but\ all\ the\ pixels\n\ that\ are\ not\ taken\ up\ by\ a\ user\ are\ set\ to\ transparent.\ \ This\ therefore\n\ gives\ you\ a\ cut-out\ view\ of\ the\ users,\ with\ all\ the\ background\ removed.\n\ If\ you\ want\ the\ cut-out\ for\ an\ individual\ user,\ use\ the\n\ getImage()/getImageX()/getImageY()\ methods\ of\ UserData.\n\n\ This\ may\ be\ null\ if\ isConnected()\ is\ false.\ \ \n
comment13.params=x\ y
comment13.target=short\ getDepthAt(int,\ int)
comment13.text=\n\ Gets\ the\ depth\ value\ at\ a\ given\ location\ in\ the\ world.\ \ The\ number\ should\n\ be\ between\ 0\ and\ getMaxDepth(),\ inclusive.\n\n\ The\ coordinates\ are\ treated\ as\ scaled,\ so\ if\ you\ passed\ 1.5f\ as\ the\ scale\n\ parameter\ to\ get\ a\ 960\ by\ 720\ world,\ you\ can\ pass\ 480,\ 360\ to\ get\ the\ depth\n\ value\ at\ the\ centre\ of\ the\ world\ (the\ scaling\ is\ done\ using\ nearest\ neighbour).\n\ \n\ Note\ that\ the\ because\ of\ the\ way\ that\ the\ depth\ view\ must\ be\ adjusted\n\ to\ match\ the\ RGB\ view\ (if\ you\ run\ the\ KinectServer\ in\ normal,\ matched\ mode),\n\ there\ will\ probably\ not\ be\ depth\ information\ available\ for\ the\ very\ edges\n\ of\ the\ world.\n\n\ If\ depth\ is\ disabled,\ the\ coordinates\ are\ out\ of\ bounds,\ or\ isConnected()\ is\ false,\ this\ method\ will\ return\ zero.\n
comment14.params=
comment14.target=short\ getMaxDepth()
comment14.text=\n\ Gets\ the\ maximum\ depth\ value.\n\n\ This\ is\ 0\ if\ there\ is\ a\ problem,\ or\ if\ act()\ has\ not\ been\ called\ yet.\n\ So\ do\ not\ call\ this\ method\ before\ act()\ may\ have\ been\ called\n\ (e.g.\ in\ an\ actor's\ constructor)\ as\ the\ result\ will\ be\ zero.\n
comment15.params=
comment15.target=void\ disconnect()
comment15.text=\n\ Disconnects\ from\ the\ KinectServer.\n
comment2.params=thumbnailWidth\ thumbnailHeight\ scale\ depth
comment2.target=KinectWorld(int,\ int,\ double,\ boolean)
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ KinectWorld.\n\ \n\ The\ first\ two\ parameters\ specify\ the\ resolution\ of\ the\ thumbnail\ (RGB)\ image\n\ taken\ from\ the\ Kinect,\ and\ the\ latter\ two\ are\ the\ same\ as\ in\ the\ other\ constructor.\n\n\ You\ only\ need\ this\ constructor\ if\ you\ know\ you\ only\ need\ to\ use\ a\n\ smaller\ thumbnail,\ and\ you\ want\ to\ save\ the\ processor\ time\ needed\ to\n\ copy\ around\ the\ larger\ thumbnail.\n
comment3.params=
comment3.target=void\ act()
comment3.text=\n\ The\ world's\ act\ method\:\ updates\ information\ from\ the\ Kinect.\n
comment4.params=
comment4.target=boolean\ isConnected()
comment4.text=\n\ Checks\ whether\ we\ are\ currently\ connected\ properly\ to\ a\ functioning\ KinectServer.\n\n\ To\ reconnect,\ the\ best\ thing\ to\ do\ is\ to\ press\ Reset\ in\ the\ Greenfoot\n\ interface.\ \ If\ everything\ is\ working\ properly,\ KinectWorld\ should\n\ connect\ when\ it\ is\ created,\ and\ should\ not\ disconnect\ once\ connected.\n
comment5.params=users
comment5.target=UserData[]\ scaleUsers(UserData[])
comment6.params=
comment6.target=UserData[]\ getAllUsers()
comment6.text=\n\ Gets\ all\ users\ currently\ in\ front\ of\ the\ Kinect.\n\n\ A\ user\ is\ a\ person\ that\ the\ Kinect\ has\ successfully\ spotted\ as\ being\ human\n\ (although\ sometimes\ doors,\ coats,\ etc\ can\ be\ marked\ as\ users,\ too\!)\n\ but\ a\ user\ has\ not\ necessarily\ calibrated\ themselves\ yet.\n\ If\ you\ are\ only\ interested\ in\ calibrated\ users,\ see\ getTrackedUsers.\n\n\ The\ returned\ array\ should\ never\ be\ null,\ but\ it\ may\ have\ length\n\ zero\ if\ there\ are\ no\ users,\ or\ if\ isConnected()\ is\ false.\n
comment7.params=
comment7.target=UserData[]\ getTrackedUsers()
comment7.text=\n\ Gets\ only\ those\ users\ who\ are\ currently\ being\ tracked\n\ (i.e.\ those\ who\ have\ successfully\ calibrated).\n\ \n\ The\ returned\ array\ should\ never\ be\ null,\ but\ it\ may\ have\ length\n\ zero\ if\ there\ are\ no\ users,\ or\ if\ isConnected()\ is\ false.\n
comment8.params=
comment8.target=UserData\ getTrackedUser()
comment8.text=\n\ Gets\ the\ first\ user\ who\ is\ being\ tracked.\n\ This\ is\ essentially\ equivalent\ to\ picking\ out\ the\ first\ entry\n\ in\ the\ getTrackedUsers()\ array,\ but\ is\ a\ useful\ shorthand.\n\n\ If\ there\ are\ no\ tracked\ users,\ or\ isConnected()\ is\ false,\ this\ will\ be\ null.\n
comment9.params=userId
comment9.target=UserData\ getUser(int)
comment9.text=\n\ Gets\ the\ UserData\ for\ a\ user\ with\ the\ specified\ identifier.\n\n\ This\ is\ useful\ if\ you\ have\ previously\ picked\ out\n\ a\ user\ from\ the\ getUsers/getTrackedUsers()\ function,\ recorded\n\ the\ identifier,\ and\ now\ want\ to\ ask\ for\ that\ user's\ most\ recent\ data.\n\n\ Returns\ null\ if\ a\ user\ with\ that\ identifier\ does\ not\ exist\n\ (this\ can\ also\ happen\ if\ the\ user\ leaves\ the\ scene,\ i.e.\ walks\n\ away\ from\ the\ Kinect\ and\ does\ not\ return\ within\ a\ few\ seconds).\n
numComments=16
